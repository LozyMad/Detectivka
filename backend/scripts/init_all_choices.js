#!/usr/bin/env node

/**
 * –†–∞–¥–∏–∫–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: —Å–æ–∑–¥–∞–µ–º –≤—ã–±–æ—Ä—ã –¥–ª—è –í–°–ï–• –∞–¥—Ä–µ—Å–æ–≤ –≤–æ –í–°–ï–• –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö
 */

const db = require('../config/scenarioDatabase');

async function initializeAllChoices() {
    console.log('üöÄ –†–ê–î–ò–ö–ê–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤ –≤–æ –í–°–ï–• —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö...');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        const { query } = require('../config/database');
        const scenariosResult = await query('SELECT * FROM scenarios WHERE is_active = 1');
        const activeScenarios = scenariosResult.rows;
        
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${activeScenarios.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:`, activeScenarios.map(s => `${s.id} (${s.name})`));
        
        for (const scenario of activeScenarios) {
            console.log(`\nüéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π ${scenario.id} (${scenario.name})`);
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
            const addressesResult = await query('SELECT * FROM addresses WHERE scenario_id = ?', [scenario.id]);
            const addresses = addressesResult.rows;
            
            console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${addresses.length} –∞–¥—Ä–µ—Å–æ–≤ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ ${scenario.id}`);
            
            if (addresses.length === 0) {
                console.log(`‚ö†Ô∏è –ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ ${scenario.id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                continue;
            }
            
            const scenarioDb = db.getScenarioDb(scenario.id);
            
            for (const address of addresses) {
                console.log(`üè† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å: ${address.district}-${address.house_number} (ID: ${address.id})`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤—ã–±–æ—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞
                const existingChoices = await new Promise((resolve, reject) => {
                    scenarioDb.all('SELECT * FROM address_choices WHERE address_id = ?', [address.id], (err, rows) => {
                        if (err) reject(err);
                        else resolve(rows);
                    });
                });
                
                if (existingChoices.length > 0) {
                    console.log(`  ‚úÖ –£–∂–µ –µ—Å—Ç—å ${existingChoices.length} –≤—ã–±–æ—Ä–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    continue;
                }
                
                // –°–æ–∑–¥–∞–µ–º –≤—ã–±–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞
                const choices = [
                    {
                        address_id: address.id,
                        choice_text: "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ",
                        response_text: `–í—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ ${address.district} —Ä–∞–π–æ–Ω, –¥–æ–º ${address.house_number}. ${address.description || '–ó–¥–µ—Å—å –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ...'}`,
                        choice_order: 1
                    },
                    {
                        address_id: address.id,
                        choice_text: "–°–ø—Ä–æ—Å–∏—Ç—å —É –ø—Ä–æ—Ö–æ–∂–∏—Ö",
                        response_text: `–í—ã —Ä–∞—Å—Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ –º–µ—Å—Ç–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π –æ –¥–æ–º–µ ${address.house_number}. –û–Ω–∏ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –æ —Ç–æ–º, —á—Ç–æ –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ.`,
                        choice_order: 2
                    },
                    {
                        address_id: address.id,
                        choice_text: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥",
                        response_text: `–í—ã —Ä–µ—à–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∞–∫—Ç–∏–∫—É –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º –º–µ—Å—Ç–µ.`,
                        choice_order: 3
                    }
                ];
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä—ã
                for (let i = 0; i < choices.length; i++) {
                    const choice = choices[i];
                    await new Promise((resolve, reject) => {
                        scenarioDb.run(
                            'INSERT INTO address_choices (address_id, choice_text, response_text, choice_order, is_active) VALUES (?, ?, ?, ?, 1)',
                            [choice.address_id, choice.choice_text, choice.response_text, choice.choice_order],
                            (err) => {
                                if (err) reject(err);
                                else resolve();
                            }
                        );
                    });
                    console.log(`  ‚ûï –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–±–æ—Ä ${i + 1}: "${choice.choice_text}"`);
                }
            }
        }
        
        console.log(`\nüéâ –†–ê–î–ò–ö–ê–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!`);
        console.log(`‚úÖ –¢–µ–ø–µ—Ä—å –¥–∏–∞–ª–æ–≥–æ–≤—ã–µ –æ–∫–Ω–∞ –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–ª—è—Ç—å—Å—è –¥–ª—è –õ–Æ–ë–û–ì–û –∞–¥—Ä–µ—Å–∞ –≤ –õ–Æ–ë–û–ú –∞–∫—Ç–∏–≤–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏!`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–¥–∏–∫–∞–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
}

module.exports = { initializeAllChoices };

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
if (require.main === module) {
    initializeAllChoices().catch(console.error);
}