const { query } = require('../config/database');
const fs = require('fs');
const path = require('path');

async function nuclearReset() {
    console.log('üí• –Ø–î–ï–†–ù–´–ô –°–ë–†–û–°: –ü–û–õ–ù–û–ï –£–ù–ò–ß–¢–û–ñ–ï–ù–ò–ï –í–°–ï–• –î–ê–ù–ù–´–• –ò ID...');
    console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏ —Å–±—Ä–æ—Å–∏—Ç –í–°–ï ID!');
    
    try {
        // 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ SQLite
        console.log('\nüóëÔ∏è  –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ SQLite...');
        const scenariosDir = path.join(__dirname, '../scenarios');
        
        if (fs.existsSync(scenariosDir)) {
            const files = fs.readdirSync(scenariosDir);
            for (const file of files) {
                if (file.endsWith('.db')) {
                    fs.unlinkSync(path.join(scenariosDir, file));
                    console.log(`   üí• –£–Ω–∏—á—Ç–æ–∂–µ–Ω —Ñ–∞–π–ª: ${file}`);
                }
            }
        }

        // 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–∑-–∑–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π)
        console.log('\nüí• –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã...');
        
        // –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏ —Å–Ω–∞—á–∞–ª–∞
        await query('DROP TABLE IF EXISTS address_choices');
        console.log('   üí• –¢–∞–±–ª–∏—Ü–∞ address_choices —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞');
        
        await query('DROP TABLE IF EXISTS addresses');
        console.log('   üí• –¢–∞–±–ª–∏—Ü–∞ addresses —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞');
        
        await query('DROP TABLE IF EXISTS rooms');
        console.log('   üí• –¢–∞–±–ª–∏—Ü–∞ rooms —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞');
        
        await query('DROP TABLE IF EXISTS users');
        console.log('   üí• –¢–∞–±–ª–∏—Ü–∞ users —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞');
        
        await query('DROP TABLE IF EXISTS scenarios');
        console.log('   üí• –¢–∞–±–ª–∏—Ü–∞ scenarios —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞');

        // 3. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –Ω—É–ª—è (ID –Ω–∞—á–Ω—É—Ç—Å—è —Å 1)
        console.log('\nüèóÔ∏è  –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –Ω—É–ª—è...');
        
        // –¢–∞–±–ª–∏—Ü–∞ scenarios
        await query(`
            CREATE TABLE scenarios (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                description TEXT,
                is_active BOOLEAN DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ scenarios –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞');

        // –¢–∞–±–ª–∏—Ü–∞ users
        await query(`
            CREATE TABLE users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL,
                is_admin BOOLEAN DEFAULT FALSE,
                admin_level TEXT DEFAULT 'user',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ users –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞');

        // –¢–∞–±–ª–∏—Ü–∞ rooms
        await query(`
            CREATE TABLE rooms (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                scenario_id INTEGER,
                max_players INTEGER DEFAULT 4,
                current_players INTEGER DEFAULT 0,
                status TEXT DEFAULT 'waiting',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (scenario_id) REFERENCES scenarios (id)
            )
        `);
        console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ rooms –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞');

        // –¢–∞–±–ª–∏—Ü–∞ addresses
        await query(`
            CREATE TABLE addresses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                scenario_id INTEGER NOT NULL,
                district TEXT NOT NULL,
                house_number TEXT NOT NULL,
                description TEXT,
                is_active BOOLEAN DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (scenario_id) REFERENCES scenarios (id)
            )
        `);
        console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ addresses –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞');

        // –¢–∞–±–ª–∏—Ü–∞ address_choices
        await query(`
            CREATE TABLE address_choices (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                address_id INTEGER NOT NULL,
                choice_text TEXT NOT NULL,
                response_text TEXT,
                choice_order INTEGER DEFAULT 1,
                is_active BOOLEAN DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (address_id) REFERENCES addresses (id)
            )
        `);
        console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ address_choices –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞');

        // 4. –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ —Å ID 1
        console.log('\nüëë –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ —Å ID 1...');
        const bcrypt = require('bcryptjs');
        const hashedPassword = bcrypt.hashSync('admin123', 10);
        
        await query(
            'INSERT INTO users (id, username, password, is_admin, admin_level) VALUES (?, ?, ?, ?, ?)',
            [1, 'admin', hashedPassword, true, 'superadmin']
        );
        console.log('   ‚úÖ –°—É–ø–µ—Ä–∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω —Å ID 1');

        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log('\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:');
        const stats = await Promise.all([
            query('SELECT COUNT(*) as count FROM users'),
            query('SELECT COUNT(*) as count FROM scenarios'),
            query('SELECT COUNT(*) as count FROM addresses'),
            query('SELECT COUNT(*) as count FROM rooms'),
            query('SELECT COUNT(*) as count FROM address_choices')
        ]);

        console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats[0].rows[0].count}`);
        console.log(`üé≠ –°—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${stats[1].rows[0].count}`);
        console.log(`üè† –ê–¥—Ä–µ—Å–æ–≤: ${stats[2].rows[0].count}`);
        console.log(`üè† –ö–æ–º–Ω–∞—Ç: ${stats[3].rows[0].count}`);
        console.log(`üéØ –í—ã–±–æ—Ä–æ–≤: ${stats[4].rows[0].count}`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
        const admin = await query('SELECT id, username, admin_level FROM users WHERE id = 1');
        console.log(`üëë –°—É–ø–µ—Ä–∞–¥–º–∏–Ω: ID ${admin.rows[0].id}, –õ–æ–≥–∏–Ω: ${admin.rows[0].username}, –†–æ–ª—å: ${admin.rows[0].admin_level}`);

        console.log('\nüéâ –Ø–î–ï–†–ù–´–ô –°–ë–†–û–° –ó–ê–í–ï–†–®–ï–ù!');
        console.log('üí• –í–°–ï –¥–∞–Ω–Ω—ã–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã, –í–°–ï ID —Å–±—Ä–æ—à–µ–Ω—ã!');
        console.log('üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã —Å ID –Ω–∞—á–∏–Ω–∞—è —Å 1!');
        console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞: admin / admin123');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —è–¥–µ—Ä–Ω–æ–º —Å–±—Ä–æ—Å–µ:', error);
    }
}

module.exports = { nuclearReset };

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–±—Ä–æ—Å
if (require.main === module) {
    nuclearReset().catch(console.error);
}
